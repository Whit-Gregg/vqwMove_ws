https://github.com/PickNikRobotics/generate_parameter_library

https://github.com/PickNikRobotics/ros_control_boilerplate

https://github.com/PickNikRobotics/rviz_visual_tools




    `colcon build --packages-select [package_name] --cmake-args -DCMAKE_BUILD_TYPE=Debug``

    export  RCUTILS_CONSOLE_OUTPUT_FORMAT="[{severtiy}] [{date_time_with_ms}] [{name}] [{function_name}] [{file_name}]:[{line_number}] [{message}]"
    export  RCUTILS_CONSOLE_OUTPUT_FORMAT="[{severity}] [{date_time_with_ms}] [{name}] [{message}]"

ros2 launch vqwbot_bringup minimal.launch.py

ros2 topic echo /diffbot_base_controller/cmd_vel geometry_msgs/msg/Twist
ros2 topic echo /diffbot_base_controller/cmd_vel geometry_msgs/msg/TwistStamped

YouTube: "Articulated Robotics"



TF2 and everything:

We've used two different approaches to this problem:

1.. Invert the transform from odom to base_link, 
so that base_link is the parent of odom. 
Your tf tree would be: world->base_link, base_link->odom, base_link->rest of robot. 
So the odom frame becomes a sidebranch of the tf tree

2.. Pub the odom frame in between base_link and world. 
Your tf tree would be: world->odom, odom->base_link, base_link->rest of robot. 
This is the approach we used on the PR2 when putting both odometry and localization in the same tf tree. 
To accomplish this, you need to convert the output of scan matching (world to base_link) 
into a new transform (world to odom) by deducting the odom to base_link transform. 
So scan matching would not publish world to base_link, but world to odom

